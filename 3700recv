#!/usr/bin/env python3
#
# CS3700, Fall 2021
# TCP Project Starter Code

# TODO:
# Queue for non-continous packets

import datetime
import json
import sys
import socket

from base64 import b64decode
import base64


def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

MSG_SIZE = 1500
TIMEOUT = 30

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = int(sys.argv[1])

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

# Last seen ACK
lastSeenACK = {}
seen_acks = []
received_packet_buffer = [] # packets that we've received but still need to be added to stdout
min_expected_seq = 0
max_expected_seq = 7000
num_packets_received_in_range = 0
next_seq_to_write = 0

def write_packet_to_stdout(decoded_packet):
  global next_seq_to_write
  received_packet_buffer.append(decoded_packet)
  received_packet_buffer.sort(key=lambda p: p['sequence'])

  log('received_packet_buffer')
  log(str(list(map(lambda x: x['sequence'], received_packet_buffer))))
  for i, p in enumerate(received_packet_buffer):
    if p['sequence'] == next_seq_to_write:
      log('writing ' + str(p['sequence']) + ' to stdout')
      data = base64.b64decode(p['data'].encode('ascii'))
      sys.stdout.buffer.write(data)
      next_seq_to_write += len(data)
      del received_packet_buffer[i]
      i -= 1

# Now listen for packets
while True:
  result = sock.recvfrom(MSG_SIZE)

  # If nothing is ready, we hit the timeout
  if result:
    (data, addr) = result

    try:
      decoded = json.loads(data.decode())
      decodedData = base64.b64decode(decoded['data'].encode('ascii'))
      # If the EOF flag is set, exit
      if (decoded['eof']):
        log("[completed]")
        sys.exit(0)

      got_expected_packet = decoded['sequence'] >= min_expected_seq and decoded['sequence'] <= max_expected_seq

      # If there is data, we accept it and print it out
      if (decodedData and got_expected_packet and not decoded['sequence'] in seen_acks):
        # num_packets_received_in_range += 1
        # if num_packets_received_in_range == 8:
        #   min_expected_seq += 8000
        #   max_expected_seq += 8000
        #   num_packets_received_in_range = 0

        log("[recv data] " + str(decoded['sequence']))
        write_packet_to_stdout(decoded)
        seen_acks.append(decoded['sequence'])

      # Store last seen ack.
      # if got_expected_packet:
      lastSeenACK = {"ack": decoded['sequence'] + len(decodedData)}

      if sock.sendto(json.dumps(lastSeenACK).encode(), addr) < len(lastSeenACK):
          log("[error] unable to fully send packet")


    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
      raise e
  else:
    log("[error] timeout")
    sys.exit(-1)

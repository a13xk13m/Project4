#!/usr/bin/python3
#
# CS3700, Fall 2021
# TCP Project Starter Code
#

# TODO:
# Slow start
# Congestion Control
# Retransmission
# Handshaking
# Flow control
# Window scaling

import datetime
import json
import sys
import socket

from base64 import b64encode
import base64


MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 5
SEQUENCE = 0

acks = []
sent_packets = {}

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def send_next_packet():
  global SEQUENCE

  data = sys.stdin.buffer.read(DATA_SIZE)
  if (len(data) > 0):
    obj = {"sequence": SEQUENCE, "data": base64.b64encode(data).decode('ascii'),
           "ack": False, "eof": False}
    msg = json.dumps(obj)
    sent_packets[SEQUENCE] = obj
    SEQUENCE += len(data)

    if sock.sendto(msg.encode(), dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
    return True
  else:
    return False

# Send first packet
send_next_packet()
# Now read in data, send packets
while True:
  log("ABOUT TO SLEEP")
  try:
    result = sock.recvfrom(MSG_SIZE)
  except socket.timeout:
    log(str(sent_packets))
    sorted_sequences_so_far = list(sent_packets.keys())
    sorted_sequences_so_far.sort()
    highest_seq_so_far = sorted_sequences_so_far[0]
    packet = sent_packets[highest_seq_so_far]
    if sock.sendto(json.dumps(packet).encode(), dest) < len(packet):
      log("IN TIMEOUT RESEND [error] unable to fully send packet")
    else:
      log("IN TIMEOUT RESEND [send data] " + str(SEQUENCE) + " (" + str(len(packet['data'])) + ")")
    continue

  if result:
    (data, addr) = result
    try:
      decoded = json.loads(data)
      # If there is an ack, send next packet
      acks.append(decoded)
      if decoded['ack'] == SEQUENCE:
        log("[recv ack] " + str(SEQUENCE))
        # Try to send next packet; break if no more data
        if (not send_next_packet()):
          break
      elif len(acks) >= 3:
        last_3 = acks[-3:]
        if last_3.count(last_3[0]) == len(last_3):
          # we have 3 duplicate ACKS
          # send back the packet with this sequence + 1
          sequence_to_send = last_3[0]['ack'] + len(sent_packets[last_3[0]['ack']]['data'])

          packets_to_send = list(filter(
              lambda p: p['sequence'] >= sequence_to_send, list(sent_packets.values())))

          SEQUENCE = sequence_to_send
          for packet in packets_to_send:
            if sock.sendto(json.dumps(packet).encode(), dest) < len(packet):
              log("IN RESEND [error] unable to fully send packet")
            else:
              log("IN RENSEND [send data] " + str(SEQUENCE) + " (" + str(len(packet['data'])) + ")")
            SEQUENCE += len(data)

    except (ValueError, KeyError, TypeError):
      log("[recv corrupt packet]")
  else:
    log("[error] timeout")
    sys.exit(-1)

sock.sendto(json.dumps({"eof": True, "data": base64.b64encode(
    b'').decode('ascii'), "sequence": SEQUENCE, "ack": False}).encode(), dest)
sys.exit(0)
